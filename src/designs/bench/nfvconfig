#!/usr/bin/env snabb

local C = require("ffi").C
local config = require("lib.nfv.config")

if #main.parameters ~= 4 then
   print([[Usage: snabbnfv-traffic <pci-address> <config-file-x> <config-file-y> <n>
Benchmark loading <config-file-y> and transitioning from <config-file-x>
to <config-file-y> <n> times.]])
   main.exit(1)
end

function run (pciaddr, confpath_x, confpath_y, nloads)
   nloads = tonumber(nloads)
      or error("Invalid number of iterations: " .. nloads)

   local load_times, apply_times = {}, {}

   for i=1, nloads do
      -- Load and apply confpath_x.
      config.apply(config.load(confpath_x, pciaddr, "/dev/null"))

      -- Measure loading y.
      local start_load = C.get_monotonic_time()
      local c, zerocopy = config.load(confpath_y, pciaddr, "/dev/null")
      local end_load = C.get_monotonic_time()

      -- Measure apply x -> y.
      local start_apply = C.get_monotonic_time()
      config.apply(c, zerocopy)
      local end_apply = C.get_monotonic_time()

      -- Push results.
      table.insert(load_times, end_load - start_load)
      table.insert(apply_times, end_apply - start_apply)
   end

   engine.report()
   print()

   -- Print results.
   local load_mean, load_max = sumf(unpack(load_times))/#load_times, math.max(unpack(load_times))
   print("load_mean:", ("%.4fs"):format(load_mean))
   print("load_max:", ("%.4fs"):format(load_max))

   local apply_mean, apply_max = sumf(unpack(apply_times))/#apply_times, math.max(unpack(apply_times))
   print("apply_mean:", ("%.4fs"):format(apply_mean))
   print("apply_max:", ("%.4fs"):format(apply_max))

   -- Overall score is load_mean+apply_mean per second.
   print("score: ", ("%.2f"):format(1/(apply_mean + load_mean)))
end

function sumf(a, ...) return a and a + sumf(...) or 0 end

run(unpack(main.parameters))
