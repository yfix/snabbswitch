#!/usr/bin/env snabb

local json = require("lib.json")

if #main.parameters < 2 or #main.parameters > 3 then
   print[[Usage: neutron2snabb <csv-dir> <output-dir> [<hostname>]

Generate configuration files for Snabb Switch traffic processes based
on an OpenStack Neutron database dump in CSV format (from mysqldump).

<csv-dir> must contain ports.txt, networks.txt, and ml2_nework_segments.txt.

<output-dir> will be populated with one file for each physical_network
describing how Neutron ports should be connected to provider networks.

<hostname> can optionally be specified mainly for testing purposes,
default is the string returned by hostname(1).
]]
   main.exit(1)
end

-- Create a Snabb Switch traffic process configuration.
--
-- INPUT_DIR contains the Neutron database dump.
--
-- OUTPUT_DIR will be populated with one file per physical_network.
-- The file says how to connect Neutron ports with provider VLANs.
--
-- HOSTNAME is optional and defaults to the local hostname.
function create_config (input_dir, output_dir, hostname)
   local hostname = hostname or gethostname()
   local segments = parse_csv(input_dir.."/ml2_network_segments.txt",
                              {'id', 'network_id', 'network_type', 'physical_network', 'segmentation_id'},
                              'network_id')
   local networks = parse_csv(input_dir.."/networks.txt",
                              {'tenant_id', 'id', 'name', 'status', 'admin_state_up', 'shared'},
                              'id')
   local ports = parse_csv(input_dir.."/ports.txt",
                           {'tenant_id', 'id', 'name', 'network_id', 'mac_address', 'admin_state_up', 'status', 'device_id', 'device_owner'},
                           'id')
   local port_bindings = parse_csv(input_dir.."/ml2_port_bindings.txt",
                                   {'id', 'host', 'vif_type', 'driver', 'segment', 'vnic_type', 'vif_details', 'profile'},
                                   'id')
   local secrules = parse_csv(input_dir.."/securitygrouprules.txt",
                              {'tenant_id', 'id', 'security_group_id', 'remote_group_id', 'direction', 'ethertype', 'protocol', 'port_range_min', 'port_range_max', 'remote_ip_prefix'},
                              'security_group_id', true)
   local secbindings = parse_csv(input_dir.."/securitygroupportbindings.txt",
                                 {'port_id', 'security_group_id'},
                                 'port_id')
   local port_count = 0
   local outputs = {}
   for _, port in pairs(ports) do
      local binding = port_bindings[port.id]
      if binding.driver == "snabb" then
         local vif_details = json.decode(binding.vif_details)
         if vif_details.zone_host == hostname then
            local port_id = vif_details.zone_port
            if not outputs[port_id] then
               local output_path = output_dir.."/"..port_id
               local output = io.open(output_path, 'w')
               if output then
                  print("Created " .. output_path)
                  outputs[port_id] = io.open(output_path, 'w')
                  outputs[port_id]:write("return {\n")
               else
                  error("Failed to create " .. output_path)
               end
            end
            if port.admin_state_up ~= '0' then
               local vlan = segments[port.network_id].segmentation_id
               local mac = port.mac_address
               -- Skipping filter for now.
               print("Warning: Ignoring security group configuration.")
               local ingressfilter = nil --filter(port, secbindings, secrules)
               local gbps = vif_details.zone_gbps
               local tunnel = tunnel(port, vif_details)
               outputs[port_id]:write(('  { vlan = %d,\n    mac_address = %q,\n    port_id = %q,\n    ingress_filter = %s,\n    gbps = %s,\n    tunnel = %s\n  },\n')
                                      :format(vlan, mac, port.id, ingressfilter, gbps, tunnel))
            end
            port_count = port_count + 1
         end
      end
   end
   for _, file in pairs(outputs) do
      file:write("}\n")
      file:close()
   end
   print("Done. Wrote " .. port_count .. " record(s).")
end

-- Return the packet filter expression.
-- XXX This is assumed to be ingress-only. Egress is simply NYI.
function filter (port, secbindings, secrules)
   local rules
   if secbindings[port.id] then
      for _,r in ipairs(secrules[secbindings[port.id].security_group_id]) do
         if r.direction:lower() == "ingress" then
            local NULL = "\\N" -- SQL null
            local rule = ""
            if r.ethertype ~= NULL then rule = rule .. " ethertype='"..(r.ethertype:lower()).."'," end
            if r.protocol ~= NULL then rule = rule .. " protocol='"..r.protocol.."'," end
            if r.port_range_min ~= NULL and r.port_range_max ~= NULL then
               rule = rule .. " dest_port_min=" .. r.port_range_min .. ", dest_port_max=" .. r.port_range_max..","
            end
            if r.remote_ip_prefix ~= NULL then rule = rule .. " source_cidr='"..rule.remote_ip_prefix.."'," end
            print("direction", r.direction)
            rules = "{" .. rule .. " },"
         end
      end
   end
   if rules then return "[[{ " .. rules .. " }]]" else return nil end
end

-- Return the L2TPv3 tunnel expresion.
function tunnel (port, vif_details)
   if vif_details.tunnel_type == "L2TPv3" then
      return ([[{type = "L2TPv3",
              remote_ip = %q,
              local_ip = %q,
              session = %d,
              local_cookie = %q,
              remote_cookie = %q,
              next_hop = %q }]])
      :format(vif_details.l2tpv3_remote_ip,
              vif_details.l2tpv3_local_ip,
              vif_details.l2tpv3_session,
              vif_details.l2tpv3_local_cookie,
              vif_details.l2tpv3_remote_cookie,
              vif_details.l2tpv3_next_hop)
   else
      return nil
   end
end

-- Parse FILENAME as a .csv file containing FIELDS.
-- Return a table from the KEY field to a record of all field values.
--
-- Example:
--   parse_csv("Luke	Gorrie	Lua\nJoe	Smith	C\n",
--             {"first", "last", "lang"},
--             "first")
-- Returns:
--   { Luke = { first = "Luke", last = "Gorrie", lang = "Lua" },
--     Joe  = { first = "Joe",  last = "Smith",  lang = "C" }
--   }
function parse_csv (filename, fields, key,  has_duplicates)
   local t = {}
   for line in io.lines(filename) do
      local record = {}
      local words = splitline(line)
      for i = 1, #words do
         record[fields[i]] = words[i]
      end
      if has_duplicates then
         if t[record[key]] == nil then t[record[key]] = {} end
         table.insert(t[record[key]], record)
      else
         t[record[key]] = record
      end
   end
   return t
end

-- Return an array of line's tab-delimited tokens.
function splitline (line)
   local words = {}
   for w in (line .. "\t"):gmatch("([^\t]*)\t") do 
      table.insert(words, w) 
   end
   return words
end

-- Get hostname.
function gethostname ()
   local f = io.popen("hostname", "r")
   local hostname = f:read()
   f:close()
   if hostname then return hostname
   else error("Could not get hostname.") end
end

-- Run as main()
create_config(unpack(main.parameters))

