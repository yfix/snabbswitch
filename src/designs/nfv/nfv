#!/usr/bin/env snabb

local app        = require("core.app")
local basic_apps = require("apps.basic.basic_apps")
local config     = require("core.config")
local intel_app  = require("apps.intel.intel_app")
local lib        = require("core.lib")
local pcap       = require("apps.pcap.pcap")
local timer      = require("core.timer")
local pci        = require("lib.hardware.pci")
local vfio       = require("lib.hardware.vfio")
local vhost_user = require("apps.vhost.vhost_user")
local C = require("ffi").C

function run (npackets)
   print("Starting NFV...")
   local pciaddr = os.getenv("NFV_PCI") or error("No $NFV_PCI set.")
   local socket  = os.getenv("NFV_SOCKET") or error("No $NFV_SOCKET set.")
   local trace   = os.getenv("NFV_TRACE")
   local server  = os.getenv("NFV_SERVER")
   pci.unbind_device_from_linux(pciaddr)
   local c = config.new()
   config.app(c, "vm", vhost_user.VhostUser, {socket_path=socket, is_server=server})
   config.app(c, "nic", intel_app.Intel82599, ([[{pciaddr='%s'}]]):format(pciaddr))
   if not trace then
      print("No trace file ($NFV_TRACE) configured.")
      config.link(c, "vm.tx -> nic.rx")
      config.link(c, "nic.tx -> vm.rx")
   else
      print("Tracing to files " .. trace .. ".{vm,nic}")
      config.app(c, "vm_tee", basic_apps.Tee)
      config.app(c, "nic_tee", basic_apps.Tee)
      config.app(c, "vm_trace", pcap.PcapWriter, trace..".vm")
      config.app(c, "nic_trace", pcap.PcapWriter, trace..".nic")
      config.link(c, "vm.tx -> vm_tee.input")
      config.link(c, "vm_tee.tx -> nic.rx")
      config.link(c, "vm_tee.tap -> vm_trace.input")
      config.link(c, "nic.tx -> nic_tee.input")
      config.link(c, "nic_tee.tx -> vm.rx")
      config.link(c, "nic_tee.tap -> nic_trace.input")
   end
   app.configure(c)
   -- Setup zero-copy
   local nic, vm = app.app_table.nic, app.app_table.vm
   nic:set_rx_buffer_freelist(vm:rx_buffers())
   if not npackets then
      timer.activate(timer.new("report", app.report, 1e9, 'repeating'))
      print("Entering app.main()")
      app.main()
   else
      npackets = tonumber(npackets)
      print(app.app_table.vm.input.rx.stats.rxpackets)
      local start, packets, bytes = 0, 0, 0
      local done = function ()
         if start == 0 and app.app_table.vm.input.rx.stats.rxpackets > 0 then
            -- started receiving, record time and packet count
            packets = app.app_table.vm.input.rx.stats.rxpackets
            bytes = app.app_table.vm.input.rx.stats.rxbytes
            start = C.get_monotonic_time()
            if os.getenv("NFV_PROF") then
               require("jit.p").start(os.getenv("NFV_PROF"))
               main.profiling = true
            else
               print("No LuaJIT profiling enabled ($NFV_PROF unset).")
            end
         end
         return app.app_table.vm.input.rx.stats.rxpackets - packets >= npackets
      end

      if npackets == 0 then
         app.main({no_report = true})
      else
         app.main({done = done, no_report = true})
      end
      local finish = C.get_monotonic_time()

      local runtime = finish - start
      packets = app.app_table.vm.input.rx.stats.rxpackets - packets
      bytes = app.app_table.vm.input.rx.stats.rxbytes - bytes
      engine.report()
      print()
      print(("Processed %.1f million packets in %.2f seconds (%d bytes; %.2f Gbps)"):format(packets / 1e6, runtime, bytes, bytes * 8.0 / 1e9 / runtime))
      print(("Made %s breaths: %.2f packets per breath; %.2fus per breath"):format(lib.comma_value(engine.breaths), packets / engine.breaths, runtime / engine.breaths * 1e6))
      print(("Rate(Mpps):\t%.3f"):format(packets / runtime / 1e6))
   end
end

run(unpack(main.parameters))

