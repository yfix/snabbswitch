In order to hava high perforamnce layer 2 forwared in the guest we will use Intel's DPDK.

Follow the instructions in the README to create the kernel and the guest image.

1. Build bzImage-no-virtio-net

We want to disable the in-kernel virtio-net driver
ensure the .config file has
# CONFIG_VIRTIO_NET is not set
and then rebuild the kernel "make bzImage -j4"

cp arch/x86/boot/bzImage ../bzImage-no-virtio-net

2. build debpkg
For the DPDK we'll need to install the kernel headers inside the guest.
The best way is to build the relevant deb pkgs (this is slow unles done on the server)

make deb-pkg -j10

3. install headers inside the guest
something like

sudo mount -o loop ubuntu-trusty.img mnt
sudo cp linux-headers-*.deb mnt/root
sudo chroot mnt
dpkg -i /root/linux-headers-*.deb
apt-get install build-essential git screen

4. build dpdk inside the guest + examples

cd /root
git clone https://github.com/virtualopensystems/dpdk.git

cd /root/dpdk/
RTE_KERNELDIR=/lib/modules/3.13.11.2+/build/ make T=x86_64-native-linuxapp-gcc config
RTE_KERNELDIR=/lib/modules/3.13.11.2+/build/ make T=x86_64-native-linuxapp-gcc install
RTE_KERNELDIR=/lib/modules/3.13.11.2+/build/ make T=x86_64-native-linuxapp-gcc examples

The last commmand (build examples) may fail while building the vhost example but that's normal.

5. create /etc/rc.local

The important thing here is to try to attach to the PCI id. In the xample here we probe 00:02.0 and 00:03.0

#!/bin/sh

DPDK="/root/dpdk/"

modprobe uio
insmod $DPDK/igb_uio.ko

$DPDK/tools/dpdk_nic_bind.py --bind=igb_uio 00:02.0
$DPDK/tools/dpdk_nic_bind.py --bind=igb_uio 00:03.0

screen -d -m $DPDK/examples/l2fwd/x86_64-native-linuxapp-gcc/l2fwd -c 0x1 -n1 -- -p 0x1

exit 0

6. optional Testing the image, requires GUI

qemu-system-x86_64 -kernel bzImage -append "root=/dev/vda" -drive if=virtio,file=ubuntu-trusty.img

 